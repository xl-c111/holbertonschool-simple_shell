┌──────────────────────┐
│   int main(void)     │
│  Start interactive   │
│  shell loop          │
└────────┬─────────────┘
         │
         ▼
┌────────────────────────────────┐
│  void print_prompt(void)       │
│  → print "$ " to stdout        │
└────────┬───────────────────────┘
         ▼
┌──────────────────────────────────────────┐
│ getline(&line, &len, stdin)              │
│ → read full user input line (e.g. "ls")  │
└────────┬─────────────────────────────────┘
         ▼
┌──────────────────────────────────────────────┐
│ int parse_line(char *line, char *argv[])     │
│ → split line into words                      │
│ → store command in argv[0], arguments in     │
│   argv[1...]                                 │
└────────┬─────────────────────────────────────┘
         ▼
┌─────────────────────────────────────────────────────────────────┐
│ int handle_builtin(char *argv[], char *line, int last_status)   │
│ → if argv[0] == "exit", call exit(last_status)                  │
│ → if argv[0] == "env", print environment variables              │
│ → if handled, return 1                                          │
└──────┬──────────────────────────────────────────────────────────┘
       │ (if not built-in) continue
       ▼
┌───────────────────────────────────────────────────┐
│ char *find_path(const char *command)              │
│ → if argv[0] contains '/',                        │
│     → check access(argv[0], X_OK)                 │
│     → if executable, return strdup(argv[0])       │
│ → else                                            │
│     → _getenv("PATH")                             │
│     → e.g., "/usr/local/bin:/usr/bin:/bin"        │
│     → split into tokens by ":"                    │
│     → iterate tokens:                             │
└──────┬────────────────────────────────────────────┘
       ▼
┌─────────────────────────────────────────────────────────────┐
│ char *build_full_path(const char *dir, const char *command) │
│ → concatenate dir + "/" + command                           │
│   e.g., "/usr/bin" + "/" + "ls" = "/usr/bin/ls"             │
│ → check access(fullpath, X_OK)                              │
│ → if executable, return fullpath                            │
│ → else free memory and return NULL                          │
└─────────────────────────────────────────────────────────────┘
          ▲ try next dir if NULL
          │
┌─────────┴─────────────────┐
│ fullpath returned to main │
└─────────┬─────────────────┘
          ▼
┌─────────────────────────────────────────────────────────────────────┐
│ void fork_wait_execve(char *argv[], char *fullpath, int *raw_status)│
│ → fork a child process                                              │ 
│ → in child:                                                         │ 
│     → execve(fullpath, argv, environ)                               │
│     → on fail: print error and exit(127)                            │
│ → in parent:                                                        │
│     → waitpid(child_pid, &status, 0)                                │
│     → extract exit status using WIFEXITED + WEXITSTATUS             │
└─────────────────────────────────────────────────────────────────────┘
          ▼
┌─────────────────────────────┐
│ Back to start of loop       │
│ (print prompt again)        │
└─────────────────────────────┘
